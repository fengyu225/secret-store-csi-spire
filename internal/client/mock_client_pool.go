// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/pool_interface.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientPoolInterface is a mock of ClientPoolInterface interface.
type MockClientPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientPoolInterfaceMockRecorder
}

// MockClientPoolInterfaceMockRecorder is the mock recorder for MockClientPoolInterface.
type MockClientPoolInterfaceMockRecorder struct {
	mock *MockClientPoolInterface
}

// NewMockClientPoolInterface creates a new mock instance.
func NewMockClientPoolInterface(ctrl *gomock.Controller) *MockClientPoolInterface {
	mock := &MockClientPoolInterface{ctrl: ctrl}
	mock.recorder = &MockClientPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientPoolInterface) EXPECT() *MockClientPoolInterfaceMockRecorder {
	return m.recorder
}

// AcquireClient mocks base method.
func (m *MockClientPoolInterface) AcquireClient(ctx context.Context, config Config) (SpireClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireClient", ctx, config)
	ret0, _ := ret[0].(SpireClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireClient indicates an expected call of AcquireClient.
func (mr *MockClientPoolInterfaceMockRecorder) AcquireClient(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireClient", reflect.TypeOf((*MockClientPoolInterface)(nil).AcquireClient), ctx, config)
}

// GetPoolStats mocks base method.
func (m *MockClientPoolInterface) GetPoolStats() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolStats")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetPoolStats indicates an expected call of GetPoolStats.
func (mr *MockClientPoolInterfaceMockRecorder) GetPoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolStats", reflect.TypeOf((*MockClientPoolInterface)(nil).GetPoolStats))
}

// ReleaseClient mocks base method.
func (m *MockClientPoolInterface) ReleaseClient(config Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseClient", config)
}

// ReleaseClient indicates an expected call of ReleaseClient.
func (mr *MockClientPoolInterfaceMockRecorder) ReleaseClient(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseClient", reflect.TypeOf((*MockClientPoolInterface)(nil).ReleaseClient), config)
}

// Shutdown mocks base method.
func (m *MockClientPoolInterface) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientPoolInterfaceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClientPoolInterface)(nil).Shutdown))
}
