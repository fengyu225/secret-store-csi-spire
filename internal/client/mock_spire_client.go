// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/interface.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	tls "crypto/tls"
	x509 "crypto/x509"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSpireClient is a mock of SpireClient interface.
type MockSpireClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpireClientMockRecorder
}

// MockSpireClientMockRecorder is the mock recorder for MockSpireClient.
type MockSpireClientMockRecorder struct {
	mock *MockSpireClient
}

// NewMockSpireClient creates a new mock instance.
func NewMockSpireClient(ctrl *gomock.Controller) *MockSpireClient {
	mock := &MockSpireClient{ctrl: ctrl}
	mock.recorder = &MockSpireClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireClient) EXPECT() *MockSpireClientMockRecorder {
	return m.recorder
}

// FetchJWTSVID mocks base method.
func (m *MockSpireClient) FetchJWTSVID(ctx context.Context, spiffeID string, audiences []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJWTSVID", ctx, spiffeID, audiences)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJWTSVID indicates an expected call of FetchJWTSVID.
func (mr *MockSpireClientMockRecorder) FetchJWTSVID(ctx, spiffeID, audiences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJWTSVID", reflect.TypeOf((*MockSpireClient)(nil).FetchJWTSVID), ctx, spiffeID, audiences)
}

// GetBundlesByDomain mocks base method.
func (m *MockSpireClient) GetBundlesByDomain(ctx context.Context) (map[string][]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundlesByDomain", ctx)
	ret0, _ := ret[0].(map[string][]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundlesByDomain indicates an expected call of GetBundlesByDomain.
func (mr *MockSpireClientMockRecorder) GetBundlesByDomain(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundlesByDomain", reflect.TypeOf((*MockSpireClient)(nil).GetBundlesByDomain), ctx)
}

// GetCACertificates mocks base method.
func (m *MockSpireClient) GetCACertificates(ctx context.Context) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCACertificates", ctx)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCACertificates indicates an expected call of GetCACertificates.
func (mr *MockSpireClientMockRecorder) GetCACertificates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCACertificates", reflect.TypeOf((*MockSpireClient)(nil).GetCACertificates), ctx)
}

// GetCertificateForIdentity mocks base method.
func (m *MockSpireClient) GetCertificateForIdentity(spiffeID string) (*tls.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateForIdentity", spiffeID)
	ret0, _ := ret[0].(*tls.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateForIdentity indicates an expected call of GetCertificateForIdentity.
func (mr *MockSpireClientMockRecorder) GetCertificateForIdentity(spiffeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateForIdentity", reflect.TypeOf((*MockSpireClient)(nil).GetCertificateForIdentity), spiffeID)
}

// GetTrustBundle mocks base method.
func (m *MockSpireClient) GetTrustBundle() (*x509.CertPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustBundle")
	ret0, _ := ret[0].(*x509.CertPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustBundle indicates an expected call of GetTrustBundle.
func (mr *MockSpireClientMockRecorder) GetTrustBundle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustBundle", reflect.TypeOf((*MockSpireClient)(nil).GetTrustBundle))
}

// Start mocks base method.
func (m *MockSpireClient) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSpireClientMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSpireClient)(nil).Start), ctx)
}

// Status mocks base method.
func (m *MockSpireClient) Status() (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockSpireClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSpireClient)(nil).Status))
}

// Stop mocks base method.
func (m *MockSpireClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSpireClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSpireClient)(nil).Stop))
}

// WaitForSVID mocks base method.
func (m *MockSpireClient) WaitForSVID(ctx context.Context, spiffeID string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForSVID", ctx, spiffeID, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForSVID indicates an expected call of WaitForSVID.
func (mr *MockSpireClientMockRecorder) WaitForSVID(ctx, spiffeID, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForSVID", reflect.TypeOf((*MockSpireClient)(nil).WaitForSVID), ctx, spiffeID, timeout)
}

// WaitForTrustBundle mocks base method.
func (m *MockSpireClient) WaitForTrustBundle(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTrustBundle", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForTrustBundle indicates an expected call of WaitForTrustBundle.
func (mr *MockSpireClientMockRecorder) WaitForTrustBundle(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTrustBundle", reflect.TypeOf((*MockSpireClient)(nil).WaitForTrustBundle), ctx, timeout)
}
