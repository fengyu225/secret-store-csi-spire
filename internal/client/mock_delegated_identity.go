// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire-api-sdk/proto/spire/api/agent/delegatedidentity/v1 (interfaces: DelegatedIdentityClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	delegatedidentityv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/agent/delegatedidentity/v1"
	grpc "google.golang.org/grpc"
)

// MockDelegatedIdentityClient is a mock of DelegatedIdentityClient interface.
type MockDelegatedIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedIdentityClientMockRecorder
}

// MockDelegatedIdentityClientMockRecorder is the mock recorder for MockDelegatedIdentityClient.
type MockDelegatedIdentityClientMockRecorder struct {
	mock *MockDelegatedIdentityClient
}

// NewMockDelegatedIdentityClient creates a new mock instance.
func NewMockDelegatedIdentityClient(ctrl *gomock.Controller) *MockDelegatedIdentityClient {
	mock := &MockDelegatedIdentityClient{ctrl: ctrl}
	mock.recorder = &MockDelegatedIdentityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegatedIdentityClient) EXPECT() *MockDelegatedIdentityClientMockRecorder {
	return m.recorder
}

// FetchJWTSVIDs mocks base method.
func (m *MockDelegatedIdentityClient) FetchJWTSVIDs(arg0 context.Context, arg1 *delegatedidentityv1.FetchJWTSVIDsRequest, arg2 ...grpc.CallOption) (*delegatedidentityv1.FetchJWTSVIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchJWTSVIDs", varargs...)
	ret0, _ := ret[0].(*delegatedidentityv1.FetchJWTSVIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJWTSVIDs indicates an expected call of FetchJWTSVIDs.
func (mr *MockDelegatedIdentityClientMockRecorder) FetchJWTSVIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJWTSVIDs", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).FetchJWTSVIDs), varargs...)
}

// SubscribeToJWTBundles mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToJWTBundles(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToJWTBundlesRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToJWTBundlesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToJWTBundles", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToJWTBundlesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToJWTBundles indicates an expected call of SubscribeToJWTBundles.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToJWTBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToJWTBundles", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToJWTBundles), varargs...)
}

// SubscribeToX509Bundles mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToX509Bundles(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToX509BundlesRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToX509BundlesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToX509Bundles", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToX509BundlesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToX509Bundles indicates an expected call of SubscribeToX509Bundles.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToX509Bundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToX509Bundles", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToX509Bundles), varargs...)
}

// SubscribeToX509SVIDs mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToX509SVIDs(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToX509SVIDsRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToX509SVIDsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToX509SVIDs", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToX509SVIDsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToX509SVIDs indicates an expected call of SubscribeToX509SVIDs.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToX509SVIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToX509SVIDs", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToX509SVIDs), varargs...)
}
