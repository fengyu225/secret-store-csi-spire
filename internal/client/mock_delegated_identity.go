// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire-api-sdk/proto/spire/api/agent/delegatedidentity/v1 (interfaces: DelegatedIdentityClient,DelegatedIdentity_SubscribeToX509SVIDsClient,DelegatedIdentity_SubscribeToX509BundlesClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	delegatedidentityv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/agent/delegatedidentity/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDelegatedIdentityClient is a mock of DelegatedIdentityClient interface.
type MockDelegatedIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedIdentityClientMockRecorder
}

// MockDelegatedIdentityClientMockRecorder is the mock recorder for MockDelegatedIdentityClient.
type MockDelegatedIdentityClientMockRecorder struct {
	mock *MockDelegatedIdentityClient
}

// NewMockDelegatedIdentityClient creates a new mock instance.
func NewMockDelegatedIdentityClient(ctrl *gomock.Controller) *MockDelegatedIdentityClient {
	mock := &MockDelegatedIdentityClient{ctrl: ctrl}
	mock.recorder = &MockDelegatedIdentityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegatedIdentityClient) EXPECT() *MockDelegatedIdentityClientMockRecorder {
	return m.recorder
}

// FetchJWTSVIDs mocks base method.
func (m *MockDelegatedIdentityClient) FetchJWTSVIDs(arg0 context.Context, arg1 *delegatedidentityv1.FetchJWTSVIDsRequest, arg2 ...grpc.CallOption) (*delegatedidentityv1.FetchJWTSVIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchJWTSVIDs", varargs...)
	ret0, _ := ret[0].(*delegatedidentityv1.FetchJWTSVIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJWTSVIDs indicates an expected call of FetchJWTSVIDs.
func (mr *MockDelegatedIdentityClientMockRecorder) FetchJWTSVIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJWTSVIDs", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).FetchJWTSVIDs), varargs...)
}

// SubscribeToJWTBundles mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToJWTBundles(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToJWTBundlesRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToJWTBundlesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToJWTBundles", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToJWTBundlesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToJWTBundles indicates an expected call of SubscribeToJWTBundles.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToJWTBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToJWTBundles", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToJWTBundles), varargs...)
}

// SubscribeToX509Bundles mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToX509Bundles(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToX509BundlesRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToX509BundlesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToX509Bundles", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToX509BundlesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToX509Bundles indicates an expected call of SubscribeToX509Bundles.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToX509Bundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToX509Bundles", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToX509Bundles), varargs...)
}

// SubscribeToX509SVIDs mocks base method.
func (m *MockDelegatedIdentityClient) SubscribeToX509SVIDs(arg0 context.Context, arg1 *delegatedidentityv1.SubscribeToX509SVIDsRequest, arg2 ...grpc.CallOption) (delegatedidentityv1.DelegatedIdentity_SubscribeToX509SVIDsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToX509SVIDs", varargs...)
	ret0, _ := ret[0].(delegatedidentityv1.DelegatedIdentity_SubscribeToX509SVIDsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToX509SVIDs indicates an expected call of SubscribeToX509SVIDs.
func (mr *MockDelegatedIdentityClientMockRecorder) SubscribeToX509SVIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToX509SVIDs", reflect.TypeOf((*MockDelegatedIdentityClient)(nil).SubscribeToX509SVIDs), varargs...)
}

// MockDelegatedIdentity_SubscribeToX509SVIDsClient is a mock of DelegatedIdentity_SubscribeToX509SVIDsClient interface.
type MockDelegatedIdentity_SubscribeToX509SVIDsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder
}

// MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder is the mock recorder for MockDelegatedIdentity_SubscribeToX509SVIDsClient.
type MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder struct {
	mock *MockDelegatedIdentity_SubscribeToX509SVIDsClient
}

// NewMockDelegatedIdentity_SubscribeToX509SVIDsClient creates a new mock instance.
func NewMockDelegatedIdentity_SubscribeToX509SVIDsClient(ctrl *gomock.Controller) *MockDelegatedIdentity_SubscribeToX509SVIDsClient {
	mock := &MockDelegatedIdentity_SubscribeToX509SVIDsClient{ctrl: ctrl}
	mock.recorder = &MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) EXPECT() *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) Recv() (*delegatedidentityv1.SubscribeToX509SVIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*delegatedidentityv1.SubscribeToX509SVIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509SVIDsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDelegatedIdentity_SubscribeToX509SVIDsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509SVIDsClient)(nil).Trailer))
}

// MockDelegatedIdentity_SubscribeToX509BundlesClient is a mock of DelegatedIdentity_SubscribeToX509BundlesClient interface.
type MockDelegatedIdentity_SubscribeToX509BundlesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder
}

// MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder is the mock recorder for MockDelegatedIdentity_SubscribeToX509BundlesClient.
type MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder struct {
	mock *MockDelegatedIdentity_SubscribeToX509BundlesClient
}

// NewMockDelegatedIdentity_SubscribeToX509BundlesClient creates a new mock instance.
func NewMockDelegatedIdentity_SubscribeToX509BundlesClient(ctrl *gomock.Controller) *MockDelegatedIdentity_SubscribeToX509BundlesClient {
	mock := &MockDelegatedIdentity_SubscribeToX509BundlesClient{ctrl: ctrl}
	mock.recorder = &MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) EXPECT() *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) Recv() (*delegatedidentityv1.SubscribeToX509BundlesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*delegatedidentityv1.SubscribeToX509BundlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDelegatedIdentity_SubscribeToX509BundlesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDelegatedIdentity_SubscribeToX509BundlesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDelegatedIdentity_SubscribeToX509BundlesClient)(nil).Trailer))
}
